<?php

namespace app\models\forms;

use app\models\Composition;
use app\models\Dishes;
use yii\base\InvalidConfigException;
use yii\base\Model;
use yii\helpers\ArrayHelper;

class DishForm extends Model
{
    public ?int $id = null;
    public ?string $dish_name_en = null;
    public ?string $dish_name_ru = null;
    public ?string $dish_name_kk = null;
    public array $composition = [];
    public ?string $dish_price = null;
    public ?string $dish_photo = null;
    public ?string $type = null;

    public function rules(): array
    {
        return ([
            [['dish_name_en', 'dish_name_ru', 'dish_name_kk', 'composition',
                'dish_price', 'dish_photo', 'type'], 'required'],
            ['dish_price' => 'number'],
            [['dish_name_en','dish_name_ru','dish_name_kk','type'],'string'],
            ['id', 'integer', 'min' => 1],
        ]);
    }

    public function attributeLabels(): array
    {
        return [
            'dish_name_en'=>'Name of dish en',
            'dish_name_ru'=>'Name of dish ru',
            'dish_name_kk'=>'Name of dish kz',
            'composition'=>'Composition',
            'dish_price'=>'Price',
            'dish_photo'=>'Photo',
            'type'=>'Type'
        ]; // TODO: Change the autogenerated stub
    }

    public function loadData(Dishes|null $dish): void
    {
        if(!$dish){
            return;
        }
        $this->id = $dish->id;
        $this->dish_name_en = $dish->dish_name_en;
        $this->dish_name_ru = $dish->dish_name_ru;
        $this->dish_name_kk = $dish->dish_name_kk;
        $this->composition = ArrayHelper::getColumn ($dish->composition,'ingredient_id');
        $this->dish_price = $dish->dish_price;
        $this->dish_photo = $dish->dish_photo;
        $this->type = $dish->type;

    }

    /**
     * @throws InvalidConfigException
     */
    public function save(): bool
    {
        $dish = $this->id ? Dishes::findOne($this->id) : \Yii::createObject(Dishes::class);
        $dish->dish_name_en = $this->dish_name_en;
        $dish->dish_name_ru = $this->dish_name_ru;
        $dish->dish_name_kk = $this->dish_name_kk;

        $dish->dish_price = $this->dish_price;
        $dish->dish_photo = $this->dish_photo;
        $dish->type = $this->type;
        $dish->save();

        $this->id = $dish->id;
        $ingredientsToSave = array_map(function ($v) {
            return intval($v);
        }, $this->composition);
        $model_composition = Composition::find()->indexBy('id')->andWhere(['dish_id' => $dish->id])->all();

        if ($this->composition) {
            $diffs = array_diff($ingredientsToSave, ArrayHelper::getColumn($model_composition, 'ingredient_id'));
            $diff = array_diff(ArrayHelper::getColumn($model_composition, 'ingredient_id'), $ingredientsToSave);
            if ($diffs) {
                foreach ($diffs as $ingredient) {

                    $Composition = new Composition();
                    $Composition->dish_id = $dish->id;
                    $Composition->ingredient_id = $ingredient;
                    $Composition->save();


                    if ($Composition->validate()) {
                        $Composition->save(false);
                    }
                }
            }
            if ($diff) {
                foreach ($model_composition as $ingredient) {
                    if (in_array($ingredient->ingredient_id, $diff)) {
                        $ingredient->delete();
                    }
                }
            }


        }
        return true;
    }
}